ext {
    checkStyleVersion = "6.7"
    androidVersion = extractVersion(project.properties["version"], true)
    androidVersionCode = extractVersionCode(project.properties["version"])

    println("androidVersion = " + androidVersion + ", androidVersionCode = " + androidVersionCode)
}

def extractVersion(v, android) {
    def isSnapshot = v.endsWith("-SNAPSHOT")
    v = v.replaceAll("-SNAPSHOT", "")
    def (major, minor, build) = v.tokenize(".")

    def result = major + "." + minor + "." + build
    if (android) {

        new ByteArrayOutputStream().withStream { commitId ->
            exec {
                executable = 'git'
                args = ['rev-parse', '--short', 'HEAD']
                workingDir = "$rootProject.projectDir"
                ignoreExitValue = false
                standardOutput = commitId
            }

            result += "." + commitId.toString().trim()
        }

    }

    if (isSnapshot) {
        result += "-SNAPSHOT"
    }
    return result
}


def extractVersionCode(v) {
    def isSnapshot = v.endsWith("-SNAPSHOT")
    v = v.replaceAll("-SNAPSHOT", "")
    def (major, minor, build) = v.tokenize(".")
    def code = major.toInteger() * 10000 + minor.toInteger() * 100 + build.toInteger()
    def commitCount = (isSnapshot ? 0 : 1000) // release version is ahead of snapshot

    new ByteArrayOutputStream().withStream { commitCountStr ->
        exec {
            executable = 'git'
            args = ['rev-list', '--count', 'HEAD']
            workingDir = "$rootProject.projectDir"
            ignoreExitValue = false
            standardOutput = commitCountStr
        }
        if (!commitCountStr.toString().trim().isEmpty()) {
            commitCount += commitCountStr.toString().trim().toInteger()
        }
    }
    code = code * 10000 + commitCount
    return code
}